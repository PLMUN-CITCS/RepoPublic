name: Make Organization Repositories Public
on:
  workflow_dispatch:

jobs:
  make_public:
    runs-on: ubuntu-latest
    permissions:
        actions: write
        attestations: write
        checks: write
        contents: write
        deployments: write
        id-token: write
        issues: write
        discussions: write
        packages: write
        pages: write
        pull-requests: write
        repository-projects: write
        security-events: write
        statuses: write

    steps:
      - name: Get Organization Repositories
        id: get_repos
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const org = context.repo.owner;
            const repoType = 'all'; // Or 'private' for testing
            let repos = [];
            let page = 1;
            try {
              while (true) {
                const response = await github.rest.repos.listForOrg({
                  org,
                  type: repoType,
                  page,
                  per_page: 100,
                });
                repos = repos.concat(response.data);
                if (response.data.length < 100) break;
                page++;
              }
              if (repos.length === 0) {
                console.log("No repositories found or no private repositories to make public.");
                core.setOutput('repos', '[]'); // Set output even if empty
                return;
              }
              const reposJson = JSON.stringify(repos);
              core.setOutput('repos', reposJson); // Use core.setOutput
            } catch (error) {
              console.error("Error fetching repositories:", error);
              core.setOutput('repos', '[]'); // Set output to empty array on error
            }

      - name: Make Repositories Public
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const reposJson = ${{ steps.get_repos.outputs.repos }}; // Access via outputs.repos
            try {
              const repos = JSON.parse(reposJson);

              if (!Array.isArray(repos) || repos.length === 0) {
                console.log("No repositories to process.");
                return;
              }

              const org = context.repo.owner;

              for (const repo of repos) {
                try {
                  if (repo.private) {
                    console.log(`Making ${org}/${repo.name} public...`);
                    await github.rest.repos.update({
                      owner: org,
                      repo: repo.name,
                      private: false,
                    });
                    console.log(`${org}/${repo.name} is now public.`);
                  } else {
                    console.log(`${org}/${repo.name} is already public. Skipping...`);
                  }
                } catch (error) {
                  console.error(`Error making ${org}/${repo.name} public: ${error}`);
                }
              }
            } catch (parseError) {
              console.error("Error parsing JSON:", parseError);
              console.error("Received JSON string:", reposJson);
            }
